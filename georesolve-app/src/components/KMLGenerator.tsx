import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import {
  AlertCircle,
  CheckCircle,
  Download,
  FileText,
  Trash2,
  Upload,
} from "lucide-react";
import { useRef, useState } from "react";

interface Coordinate {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
  description?: string;
  elevation?: number;
}

const KMLGenerator = () => {
  const [coordinates, setCoordinates] = useState<Coordinate[]>([]);
  const [manualInput, setManualInput] = useState("");
  const [projectName, setProjectName] = useState("GeoResolve Project");
  const [projectDescription, setProjectDescription] = useState(
    "Generated by GeoResolve KML Generator",
  );
  const [result, setResult] = useState<{
    type: "success" | "error" | "info";
    message: string;
  } | null>(null);

  const fileInputRef = useRef<HTMLInputElement>(null);

  const parseCoordinatesFromText = (text: string): Coordinate[] => {
    const lines = text
      .trim()
      .split("\n")
      .filter((line) => line.trim());
    const coords: Coordinate[] = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;

      // Support multiple formats:
      // 1. "lat,lon" or "lat, lon"
      // 2. "name,lat,lon" or "name, lat, lon"
      // 3. "name,lat,lon,description" or "name, lat, lon, description"
      // 4. "lat,lon,elevation" or "lat, lon, elevation"
      // 5. "name,lat,lon,elevation,description"

      const parts = line.split(",").map((part) => part.trim());

      if (parts.length < 2) continue;

      let name = `Point ${i + 1}`;
      let lat = 0;
      let lon = 0;
      let description = "";
      let elevation: number | undefined;

      if (parts.length === 2) {
        // lat,lon
        lat = Number.parseFloat(parts[0]);
        lon = Number.parseFloat(parts[1]);
      } else if (parts.length === 3) {
        // Check if third is elevation (number) or name (string)
        const third = Number.parseFloat(parts[2]);
        if (!Number.isNaN(third) && Math.abs(third) < 10000) {
          // Likely elevation
          lat = Number.parseFloat(parts[0]);
          lon = Number.parseFloat(parts[1]);
          elevation = third;
        } else {
          // Likely name,lat,lon
          name = parts[0];
          lat = Number.parseFloat(parts[1]);
          lon = Number.parseFloat(parts[2]);
        }
      } else if (parts.length === 4) {
        name = parts[0];
        lat = Number.parseFloat(parts[1]);
        lon = Number.parseFloat(parts[2]);
        const fourth = Number.parseFloat(parts[3]);
        if (!Number.isNaN(fourth) && Math.abs(fourth) < 10000) {
          elevation = fourth;
        } else {
          description = parts[3];
        }
      } else if (parts.length >= 5) {
        name = parts[0];
        lat = Number.parseFloat(parts[1]);
        lon = Number.parseFloat(parts[2]);
        elevation = Number.parseFloat(parts[3]);
        description = parts[4];
      }

      if (
        Number.isNaN(lat) ||
        Number.isNaN(lon) ||
        lat < -90 ||
        lat > 90 ||
        lon < -180 ||
        lon > 180
      ) {
        continue; // Skip invalid coordinates
      }

      coords.push({
        id: `coord_${Date.now()}_${i}`,
        name,
        latitude: lat,
        longitude: lon,
        description,
        elevation:
          elevation && !Number.isNaN(elevation) ? elevation : undefined,
      });
    }

    return coords;
  };

  const parseCSVFile = (file: File): Promise<Coordinate[]> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const text = e.target?.result as string;
          const coords = parseCoordinatesFromText(text);
          resolve(coords);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = () => reject(new Error("Failed to read file"));
      reader.readAsText(file);
    });
  };

  const handleManualInput = () => {
    if (!manualInput.trim()) {
      setResult({
        type: "error",
        message: "Please enter coordinate data in the text area.",
      });
      return;
    }

    try {
      const newCoords = parseCoordinatesFromText(manualInput);

      if (newCoords.length === 0) {
        setResult({
          type: "error",
          message: "No valid coordinates found. Please check your format.",
        });
        return;
      }

      setCoordinates((prev) => [...prev, ...newCoords]);
      setManualInput("");
      setResult({
        type: "success",
        message: `Successfully added ${newCoords.length} coordinate(s).`,
      });
    } catch (error) {
      setResult({
        type: "error",
        message: `Error parsing coordinates: ${error instanceof Error ? error.message : "Unknown error"}`,
      });
    }
  };

  const handleFileUpload = async (
    event: React.ChangeEvent<HTMLInputElement>,
  ) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.toLowerCase().endsWith(".csv")) {
      setResult({
        type: "error",
        message: "Please select a CSV file.",
      });
      return;
    }

    try {
      const newCoords = await parseCSVFile(file);

      if (newCoords.length === 0) {
        setResult({
          type: "error",
          message: "No valid coordinates found in the CSV file.",
        });
        return;
      }

      setCoordinates((prev) => [...prev, ...newCoords]);
      setResult({
        type: "success",
        message: `Successfully imported ${newCoords.length} coordinate(s) from CSV.`,
      });
    } catch (error) {
      setResult({
        type: "error",
        message: `Error reading CSV file: ${error instanceof Error ? error.message : "Unknown error"}`,
      });
    }

    // Reset file input
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const generateKML = (): string => {
    const kmlHeader = `<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
  <Document>
    <name>${projectName}</name>
    <description><![CDATA[${projectDescription}]]></description>
    <Style id="defaultStyle">
      <IconStyle>
        <Icon>
          <href>http://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png</href>
        </Icon>
      </IconStyle>
    </Style>`;

    const placemarks = coordinates
      .map(
        (coord) => `
    <Placemark>
      <name>${coord.name}</name>
      <description><![CDATA[${coord.description || "Generated by GeoResolve KML Generator"}]]></description>
      <styleUrl>#defaultStyle</styleUrl>
      <Point>
        <coordinates>${coord.longitude},${coord.latitude}${coord.elevation ? `,${coord.elevation}` : ""}</coordinates>
      </Point>
    </Placemark>`,
      )
      .join("");

    const kmlFooter = `
  </Document>
</kml>`;

    return kmlHeader + placemarks + kmlFooter;
  };

  const downloadKML = () => {
    if (coordinates.length === 0) {
      setResult({
        type: "error",
        message: "No coordinates to export. Please add some coordinates first.",
      });
      return;
    }

    try {
      const kmlContent = generateKML();
      const blob = new Blob([kmlContent], {
        type: "application/vnd.google-earth.kml+xml",
      });
      const url = URL.createObjectURL(blob);

      const link = document.createElement("a");
      link.href = url;
      link.download = `${projectName.replace(/[^a-z0-9]/gi, "_").toLowerCase()}.kml`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      setResult({
        type: "success",
        message: `KML file downloaded successfully with ${coordinates.length} coordinate(s).`,
      });
    } catch (error) {
      setResult({
        type: "error",
        message: `Error generating KML file: ${error instanceof Error ? error.message : "Unknown error"}`,
      });
    }
  };

  const clearCoordinates = () => {
    setCoordinates([]);
    setResult({
      type: "info",
      message: "All coordinates cleared.",
    });
  };

  const removeCoordinate = (id: string) => {
    setCoordinates((prev) => prev.filter((coord) => coord.id !== id));
  };

  return (
    <div style={{ maxWidth: "700px", margin: "auto", padding: "20px" }}>
      <h3
        style={{
          textAlign: "center",
          color: "#345363",
          marginBottom: "25px",
          fontSize: "24px",
          fontWeight: "bold",
        }}
      >
        KML File Generator
      </h3>

      {/* Project Information */}
      <div style={{ marginBottom: "25px" }}>
        <h4
          style={{
            color: "#345363",
            marginBottom: "15px",
            fontSize: "18px",
            fontWeight: "600",
          }}
        >
          Project Information
        </h4>
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "1fr 1fr",
            gap: "15px",
            marginBottom: "15px",
          }}
        >
          <div>
            <label
              style={{
                display: "block",
                marginBottom: "8px",
                fontWeight: "bold",
                color: "#345363",
              }}
            >
              Project Name:
            </label>
            <input
              type="text"
              value={projectName}
              onChange={(e) => setProjectName(e.target.value)}
              style={{
                width: "100%",
                padding: "10px",
                borderRadius: "6px",
                border: "2px solid #9EDB9E",
                fontSize: "14px",
              }}
            />
          </div>
          <div>
            <label
              style={{
                display: "block",
                marginBottom: "8px",
                fontWeight: "bold",
                color: "#345363",
              }}
            >
              Description:
            </label>
            <input
              type="text"
              value={projectDescription}
              onChange={(e) => setProjectDescription(e.target.value)}
              style={{
                width: "100%",
                padding: "10px",
                borderRadius: "6px",
                border: "2px solid #9EDB9E",
                fontSize: "14px",
              }}
            />
          </div>
        </div>
      </div>

      {/* Input Methods */}
      <div style={{ marginBottom: "25px" }}>
        <h4
          style={{
            color: "#345363",
            marginBottom: "15px",
            fontSize: "18px",
            fontWeight: "600",
          }}
        >
          Add Coordinates
        </h4>

        {/* Manual Input */}
        <div style={{ marginBottom: "20px" }}>
          <label
            style={{
              display: "block",
              marginBottom: "8px",
              fontWeight: "bold",
              color: "#345363",
            }}
          >
            Manual Entry:
          </label>
          <textarea
            value={manualInput}
            onChange={(e) => setManualInput(e.target.value)}
            placeholder={`Enter coordinates (one per line):
Examples:
-1.286389, 36.817222
Nairobi, -1.286389, 36.817222
Kampala, 0.347596, 32.582520, GPS Survey Point
Point A, -1.944444, 30.061111, 1200, Kigali Airport`}
            style={{
              width: "100%",
              height: "120px",
              padding: "12px",
              borderRadius: "6px",
              border: "2px solid #9EDB9E",
              fontSize: "14px",
              fontFamily: "monospace",
              resize: "vertical",
            }}
          />
          <Button
            onClick={handleManualInput}
            className="mt-2 bg-[#4DA34D] hover:bg-[#345363] text-white"
          >
            <Upload className="h-4 w-4 mr-2" />
            Add Coordinates
          </Button>
        </div>

        {/* CSV Upload */}
        <div style={{ marginBottom: "20px" }}>
          <label
            style={{
              display: "block",
              marginBottom: "8px",
              fontWeight: "bold",
              color: "#345363",
            }}
          >
            CSV File Upload:
          </label>
          <input
            type="file"
            ref={fileInputRef}
            accept=".csv"
            onChange={handleFileUpload}
            style={{ display: "none" }}
          />
          <Button
            onClick={() => fileInputRef.current?.click()}
            variant="outline"
            className="border-[#4DA34D] text-[#345363] hover:bg-[#9EDB9E]/20"
          >
            <Upload className="h-4 w-4 mr-2" />
            Upload CSV File
          </Button>
          <p style={{ fontSize: "12px", color: "#6c757d", marginTop: "5px" }}>
            CSV format: name,latitude,longitude,elevation,description (elevation
            and description are optional)
          </p>
        </div>
      </div>

      {/* Coordinates List */}
      {coordinates.length > 0 && (
        <div style={{ marginBottom: "25px" }}>
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              marginBottom: "15px",
            }}
          >
            <h4
              style={{
                color: "#345363",
                fontSize: "18px",
                fontWeight: "600",
                margin: 0,
              }}
            >
              Coordinates ({coordinates.length})
            </h4>
            <Button
              onClick={clearCoordinates}
              variant="outline"
              size="sm"
              className="border-red-500 text-red-600 hover:bg-red-50"
            >
              <Trash2 className="h-4 w-4 mr-1" />
              Clear All
            </Button>
          </div>
          <div
            style={{
              maxHeight: "200px",
              overflowY: "auto",
              border: "1px solid #e5e7eb",
              borderRadius: "6px",
              padding: "10px",
            }}
          >
            {coordinates.map((coord, index) => (
              <div
                key={coord.id}
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  padding: "8px 0",
                  borderBottom:
                    index < coordinates.length - 1
                      ? "1px solid #f3f4f6"
                      : "none",
                }}
              >
                <div style={{ flex: 1 }}>
                  <div style={{ fontWeight: "bold", color: "#345363" }}>
                    {coord.name}
                  </div>
                  <div
                    style={{
                      fontSize: "12px",
                      color: "#6c757d",
                      fontFamily: "monospace",
                    }}
                  >
                    {coord.latitude.toFixed(6)}, {coord.longitude.toFixed(6)}
                    {coord.elevation && ` (${coord.elevation}m)`}
                  </div>
                  {coord.description && (
                    <div style={{ fontSize: "11px", color: "#9ca3af" }}>
                      {coord.description}
                    </div>
                  )}
                </div>
                <Button
                  onClick={() => removeCoordinate(coord.id)}
                  variant="outline"
                  size="sm"
                  className="ml-2 text-red-600 hover:bg-red-50 border-red-300"
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Generate KML Button */}
      <Button
        onClick={downloadKML}
        disabled={coordinates.length === 0}
        className="w-full bg-[#4DA34D] hover:bg-[#345363] text-white text-lg font-bold py-4 px-6 mb-5 shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
      >
        <Download className="h-5 w-5 mr-2" />
        Generate & Download KML File
        {coordinates.length > 0 && ` (${coordinates.length} points)`}
      </Button>

      {/* Result Messages */}
      <div className="min-h-[80px]">
        {result && (
          <Alert
            className={`${
              result.type === "success"
                ? "border-[#4DA34D] bg-green-50"
                : result.type === "error"
                  ? "border-red-500 bg-red-50"
                  : "border-blue-500 bg-blue-50"
            }`}
          >
            {result.type === "success" ? (
              <CheckCircle className="h-4 w-4 text-[#4DA34D]" />
            ) : result.type === "error" ? (
              <AlertCircle className="h-4 w-4 text-red-500" />
            ) : (
              <FileText className="h-4 w-4 text-blue-500" />
            )}
            <AlertDescription
              className={`${
                result.type === "success"
                  ? "text-green-800"
                  : result.type === "error"
                    ? "text-red-700"
                    : "text-blue-700"
              }`}
            >
              {result.message}
            </AlertDescription>
          </Alert>
        )}
      </div>

      {/* Usage Instructions */}
      <div className="mt-6 p-4 bg-gray-50 rounded-lg border">
        <h5 className="font-semibold text-[#345363] mb-3">
          Coordinate Format Examples:
        </h5>
        <div className="text-sm text-gray-600 space-y-2 font-mono">
          <div>
            <strong>Simple:</strong> -1.286389, 36.817222
          </div>
          <div>
            <strong>Named:</strong> Nairobi, -1.286389, 36.817222
          </div>
          <div>
            <strong>With Description:</strong> Nairobi, -1.286389, 36.817222,
            Capital of Kenya
          </div>
          <div>
            <strong>With Elevation:</strong> Point A, -1.286389, 36.817222,
            1661, Nairobi elevation
          </div>
        </div>
        <p className="text-xs text-gray-500 mt-3">
          <strong>Note:</strong> The generated KML file can be opened in Google
          Earth, QGIS, ArcGIS, and other GIS applications. Coordinates must be
          in decimal degrees format (WGS84).
        </p>
      </div>
    </div>
  );
};

export default KMLGenerator;
